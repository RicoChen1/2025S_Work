#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Mini command-to-JSON parser.
读 Excel → 建语法 → 解析单行命令 → 输出 JSON
作者：ChatGPT 示例 2025-06-15
"""
import re, json, argparse, pandas as pd, pathlib
from typing import Dict, List, Tuple

# ------------------------------------------------
# 1. 读取 Excel 并生成语法表
# ------------------------------------------------
def _regex_map() -> Dict[str, str]:
    """占位符到正则的映射，可按需扩充"""
    return {
        "intf name": r"[A-Za-z]+\d*/?\d*",
        "intf":      r"[A-Za-z]+\d*/?\d*",
        "ip addr":   r"(?:\d{1,3}\.){3}\d{1,3}",
        "ip":        r"(?:\d{1,3}\.){3}\d{1,3}",
        "mask":      r"(?:\d{1,3}\.){3}\d{1,3}",
        "id":        r"\d+",
        "string":    r"\S+",
        "cnt":       r"\d+",
        # 其他占位符默认 \S+
    }

def load_grammar(excel_path: str) -> Dict[Tuple[str, str], List[List[Tuple[str, str]]]]:
    """
    读取 Excel 并返回
      { (verb, object): [ [(token|param , regex|None), ...] , ... ] }
    """
    df = pd.read_excel(excel_path, engine="openpyxl")
    # 填充合并单元格
    for col in ("动作", "对象"):
        if col not in df.columns:
            raise ValueError(f"Excel 缺少列 “{col}”")
        df[col] = df[col].ffill()

    # 过滤掉无效行
    df = df[df["属性和参数"].notna()].copy()

    grammar = {}
    token_re = re.compile(r"<[^>]+>|[^\s]+")   # 把 <…> 当成一个 token
    ignore = {"[", "]", ","}

    for _, row in df.iterrows():
        verb = str(row["动作"]).strip()
        obj  = str(row["对象"]).strip()
        patt = str(row["属性和参数"])
        tokens = token_re.findall(patt)

        spec = []
        for tk in tokens:
            if tk in ignore:
                continue
            if tk.startswith("<") and tk.endswith(">"):
                name = tk[1:-1].strip()
                rgx  = _regex_map().get(name.lower(), r"\S+")
                spec.append((name, rgx))           # 占位符
            else:
                spec.append((tk, None))            # 字面量
        grammar.setdefault((verb, obj), []).append(spec)

    return grammar

# ------------------------------------------------
# 2. 解析单行命令
# ------------------------------------------------
def parse_command(cmd: str,
                  grammar: Dict[Tuple[str, str], List[List[Tuple[str, str]]]]
                 ) -> Dict:
    """
    把命令行文本解析成 JSON‐like dict
    失败会抛 ValueError
    """
    tokens = cmd.strip().split()
    if len(tokens) < 2:
        raise ValueError("命令至少要有 <动词 对象 …>")

    verb, obj, rest = tokens[0], tokens[1], tokens[2:]
    patterns = grammar.get((verb, obj))
    if not patterns:
        raise ValueError(f"未知命令头: {verb} {obj}")

    for spec in patterns:                # 穷举所有形态
        args, i, ok = {}, 0, True
        for tk, rgx in spec:
            if rgx is None:              # 字面量
                if i >= len(rest) or rest[i] != tk:
                    ok = False; break
            else:                        # 参数占位符
                if i >= len(rest) or not re.fullmatch(rgx, rest[i]):
                    ok = False; break
                args[tk] = rest[i]
            i += 1
        if ok and i == len(rest):
            return {"verb": verb, "object": obj, "args": args}

    raise ValueError("输入不符合任何已知语法")

# ------------------------------------------------
# 3. CLI / 调试入口
# ------------------------------------------------
def main():
    ap = argparse.ArgumentParser(
        description="Parse one-line device command to JSON")
    ap.add_argument("command", help="完整的一行命令（带引号）")
    ap.add_argument("-f", "--file", default="命令树-G.xlsx",
                    help="语法 Excel 文件 (default: %(default)s)")
    args = ap.parse_args()

    grammar = load_grammar(args.file)
    result  = parse_command(args.command, grammar)
    print(json.dumps(result, ensure_ascii=False, indent=2))

if __name__ == "__main__":
    main()
